FORMAT: 1A

Station Metadata API
=============================

# General information

This Service exists to provide the canonical API for querying and returning MeteoGroup stations and their capabilities.
The output response with requested stations is always in GEOJson format.

The API supports various combinations for querying stations meta data by area/region (bounding box, polygon, multi-polygon),
by provider or type, by stations where MeteoGroup produces forecast or has observation data available.

## Authentication

To access active-warning-service the request has to be authorised with a valid
JWT OAuth 2.0 access token,  obtained from the MeteoGroup Authorisation server
`https://auth.weather.mg/oauth/token`  with according client credentials. The
required scope is `station-metadata`.

The documentation about how to authenticate against MeteoGroup Weather API with
OAuth 2.0 can be found here: [Weather API documentation](https://github.com/MeteoGroup/weather-api/blob/master/authorization/Authentication.md)

### Querying MeteoGroup stations data

Here is the information about all supported HTTP request parameters and HTTP Headers:

+ Headers

    + Authorization: Bearer {ENCRYPTED TOKEN HERE}
    + If-Modified-Since: {DATE}

+ Parameters

        + locatedWithin:
            - {"type":"bbox","coordinates":[[lon,lat],[lon,lat]]} (string, optional) - top left and bottom right coordinates that construct bounding box
            - {"type":"polygon","coordinates":[[[-10,10],[10,5],[-5,-5],[-10,10]],[[-5,5],[0,5],[0,0],[-5,5]]]} - polygon coordinates; same as in [GeoJSON Polygon](https://tools.ietf.org/html/rfc7946#section-3.1.6)
            - {"type":"multipolygon","coordinates":[[[[102.0,2.0],[103.0,2.0],[103.0,3.0],[102.0,3.0],[102.0,2.0]]],
                                                   [[[100.0,0.0],[101.0,0.0],[101.0,1.0],[100.0,1.0],[100.0,0.0]],
                                                   [[100.2,0.2],[100.8,0.2],[100.8,0.8],[100.2,0.8],[100.2,0.2]]]]} - a multi-polygon, as in [GeoJSON MultiPolygon](https://tools.ietf.org/html/rfc7946#section-3.1.7)
        + accessVisibility: `public` (string, optional) - station access visibility, valid values is `public` and `private`
        + provider: `WMO,MG` (string, optional) - currently filter by provider or providers. All possible providers are described in section: **Get all providers**
        + type: `SKI_RESORT` (string, optional) - currently filter by type. All possible types are described in section: **Get all station types**
        + hasForecastData: `false` (boolean, optional) - station has forecast data.
        + hasObservationData: `true` (boolean, optional) - station has observation data.
        + countryIsoCode: `GB` (string, optional) - station located in this country. ISO Code refers to the [ISO 3166 alpha-2 codes](https://en.wikipedia.org/wiki/ISO_3166)
        + meteoGroupStationId: `1004,1005` (string, optional) - filter stations by MeteoGroup station id/(comma separated ids).
        + fields: accessVisibility,icaoCode,countryIsoCode,provider,type,hasForecastData,wmoCountryId,hasObservationData,countryIsoCode,
                  meteoGroupStationId,name,stationTimeZoneName - metadata fields in response, geometry is present in every success response.
                  If fields is absent all fields return.

Here are a couple of examples how to query by provider and type, bounding box and polygon.

#### Querying by provider or type

Query example:

```
GET /stations?accessVisibility=public&provider=WMO&hasForecastData=true&hasObservationData=false&countryIsoCode=UA&meteoGroupStationId=1004,1005
```

+ Response 200 (application/json)

    + Headers

            Last-Modified: Mon, 10 Jul 2017 08:37:16 GMT

    + Body
    ```
    {
      "type": "FeatureCollection",
      "features": [
    {
        "type": "Feature",
        "properties": {
            "accessVisibility": "public",
            "icaoCode": "ENAS",
            "countryIsoCode": "NO",
            "provider": "WMO",
            "hasForecastData": true,
            "wmoCountryId": 165,
            "meteoGroupStationId": 1004,
            "name": "Ny-Alesund II",
            "hasObservationData": false,
            "stationTimeZoneName": "Arctic/Longyearbyen",
            "type": "WMO"
        },
        "geometry": {
            "type": "Point",
            "coordinates": [
                11.9222,
                78.9233,
                16
            ]
        }
    },
    {
        "type": "Feature",
        "properties": {
            "accessVisibility": "public",
            "countryIsoCode": "NO",
            "provider": "WMO",
            "hasForecastData": true,
            "wmoCountryId": 165,
            "meteoGroupStationId": 1005,
            "name": "Isfjord Radio",
            "hasObservationData": false,
            "stationTimeZoneName": "Arctic/Longyearbyen",
            "type": "WMO"
        },
        "geometry": {
            "type": "Point",
            "coordinates": [
                13.6333,
                78.0667,
                5
            ]
            }
        }
      ]
    }
    ```
    
### Queries by area or region (bounding box, polygone or multipolygone)

When querying stations within a region queries have to formated, like geometries in [GeoJSON](https://tools.ietf.org/html/rfc7946).
See the following examples.

#### Querying by bounding box

Query example for getting stations by bounding box: ```locatedWithin={"type":"bbox","coordinates":[[-10,80],[10,5]]}```

The HTTP request with encoded **locatedWithin** param is:
```
GET /stations?locatedWithin=%7B%22type%22%3A%22bbox%22%2C%22coordinates%22%3A%5B%5B-10%2C80%5D%2C%5B10%2C5%5D%5D%7D
```

**NOTE**: The **locatedWithin** parameter has to be encoded before putting it to the request. Online URL encoder: http://www.url-encode-decode.com/

The response body is the same as for querying stations by provider and type.

#### Querying by polygon

Example GeoJSON polygon: ```{"type":"polygon","coordinates":[[[-0.16,51.70],[-0.43,51.29],[0.18,51.30],[-0.16,51.70]]]}```

A corresponding HTTP request to get station within such a area needs to be URL encoded and looks like this:
```
GET /stations?locatedWithin=%7B%22type%22%3A%22polygon%22%2C%22coordinates%22%3A%5B%5B%5B-0.16%2C51.70%5D%2C%5B-0.43%2C51.29%5D%2C%5B0.18%2C51.30%5D%2C%5B-0.16%2C51.70%5D%5D%5D%7D
```

**NOTE**: The **locatedWithin** parameter has to be encoded before putting it to the request. Online URL encoder: http://www.url-encode-decode.com/

#### Querying by multi-polygon

Example GeoJSON multi-polygon: ```{"type":"multipolygon","coordinates":[[[[102.0,2.0],[103.0,2.0],[103.0,3.0],[102.0,3.0],[102.0,2.0]]],
                                                                       [[[100.0,0.0],[101.0,0.0],[101.0,1.0],[100.0,1.0],[100.0,0.0]],
                                                                       [[100.2,0.2],[100.8,0.2],[100.8,0.8],[100.2,0.8],[100.2,0.2]]]]}```

A corresponding HTTP request to get station within such a area needs to be URL encoded and looks like this:
```
GET /stations?locatedWithin=%7B%22type%22%3A%22multipolygon%22%2C%22coordinates%22%3A%5B%5B%5B%5B102.0%2C2.0%5D%2C%5B103.0%2C2.0%5D%2C%5B103.0%2C3.0%5D%2C%5B102.0%2C3.0%5D%2C%5B102.0%2C2.0%5D%5D%5D%2C%5B%5B%5B100.0%2C0.0%5D%2C%5B101.0%2C0.0%5D%2C%5B101.0%2C1.0%5D%2C%5B100.0%2C1.0%5D%2C%5B100.0%2C0.0%5D%5D%2C%5B%5B100.2%2C0.2%5D%2C%5B100.8%2C0.2%5D%2C%5B100.8%2C0.8%5D%2C%5B100.2%2C0.8%5D%2C%5B100.2%2C0.2%5D%5D%5D%5D%7D
```

**NOTE**:
The `locatedWithin` parameter has to be encoded before putting it to the request.
There are free online URL encoder available, for rapid manual testing: e.g. http://www.url-encode-decode.com/
If the query value is not proper encoded, you will receive an empty response with status code ```400 Bad Request```.

#### Get all station types

Query example:

```
GET /stations/types
```

Returns a list containing all current known station types. This list can be extended in the future.

+ Response 200 (application/json)

```
{
    "types": [
        "AIRQUALITY",
        "AVIATION",
        "MARINE",
        "MG_NETWORK",
        "NMI_SECONDARY",
        "OTHER_OBS_HQ",
        "OTHER_OBS_LQ",
        "RAIL",
        "ROAD",
        "SKI_RESORT",
        "SPECIAL_OBS",
        "VIRTUAL",
        "WMO"
    ],
    "_links": {
        "AIRQUALITY": {
            "href": "http://station-metadata.weather.mg/stations?type=AIRQUALITY"
        },
        "AVIATION": {
            "href": "http://station-metadata.weather.mg/stations?type=AVIATION"
        },
        "MARINE": {
            "href": "http://station-metadata.weather.mg/stations?type=MARINE"
        },
        "MG_NETWORK": {
            "href": "http://station-metadata.weather.mg/stations?type=MG_NETWORK"
        },
        "NMI_SECONDARY": {
            "href": "http://station-metadata.weather.mg/stations?type=NMI_SECONDARY"
        },
        "OTHER_OBS_HQ": {
            "href": "http://station-metadata.weather.mg/stations?type=OTHER_OBS_HQ"
        },
        "OTHER_OBS_LQ": {
            "href": "http://station-metadata.weather.mg/stations?type=OTHER_OBS_LQ"
        },
        "RAIL": {
            "href": "http://station-metadata.weather.mg/stations?type=RAIL"
        },
        "ROAD": {
            "href": "http://station-metadata.weather.mg/stations?type=ROAD"
        },
        "SKI_RESORT": {
            "href": "http://station-metadata.weather.mg/stations?type=SKI_RESORT"
        },
        "SPECIAL_OBS": {
            "href": "http://station-metadata.weather.mg/stations?type=SPECIAL_OBS"
        },
        "VIRTUAL": {
            "href": "http://station-metadata.weather.mg/stations?type=VIRTUAL"
        },
        "WMO": {
            "href": "http://station-metadata.weather.mg/stations?type=WMO"
        }
    }
}
```


#### Get all providers

Query example:

```
GET /stations/providers
```

Returns a list containing all current known data providers. This list can be extended in the future.

+ Response 200 (application/json)
```
{
    "providers": [
        "ICAO",
        "KNMI",
        "MG",
        "WMO",
        ...
    ],
    "_links": {
        "ICAO": {
            "href": "http://station-metadata.weather.mg/stations?provider=ICAO"
        },
        "KNMI": {
            "href": "http://station-metadata.weather.mg/stations?provider=KNMI"
        },
        "MG": {
            "href": "http://station-metadata.weather.mg/stations?provider=MG"
        },
        "WMO": {
            "href": "http://station-metadata.weather.mg/stations?provider=WMO"
        },
        ...
    }
}
```


### Cache control headers:

The service offer regular HTTP caching hints in the reponse header.
All clients are requested to follow good API citizen guidelines and respect these cache information.

Example: f data unchanged since this date using the If-Modified-Since request header
the server will return with an empty body with the 304 response code. Ex:
+ Last-Modified: Mon, 10 Jul 2017 08:37:16 GMT
+ If-Modified-Since: Thu, 13 Jul 2017 10:55:53 GMT
